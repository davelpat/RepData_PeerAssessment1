# Reproducable Data - Peer Review 1
setwd("C:/Users/Dave/WorkSpaces/R/datasciencecoursera/RepData_PeerAssessment1")
date.downloaded <- date()
date.downloaded
# [1] "Sun May 03 06:57:00 2015"
dir()
# Load the data
activity_file <- "activity.csv"
activity <- read.csv(activity_file)
# interval format is hhmm with leading zeros dropped
# how much data is missing
# the first day is
sum(is.na(activity$steps))
# how many observations per day?
daily.obs <- 12*24
# 288
library("dplyr", lib.loc="~/R/win-library/3.1")
library("lubridate", lib.loc="~/R/win-library/3.1")
day1 <- activity[1:289,]
strptime(day1[8,"interval"], format = "%H%M")
# [1] NA
strptime(day1[16,"interval"], format = "%H%M")
# [1] "2015-05-03 11:05:00 PDT"
paste("000",as.character(5))
# [1] "000 5"
paste("000",as.character(5), sep = "")
# [1] "0005"
sprintf("%04d", day1[8,"interval"])
# [1] "0035"
sprintf("%04d", day1[1,"interval"])
# [1] "0000"
day1a <- ymd_hm(sprintf("%10s %04d", day1$date, day1$interval))
head(day1a)
# [1] "2012-10-01 00:00:00 UTC" "2012-10-01 00:05:00 UTC" "2012-10-01 00:10:00 UTC"
# [4] "2012-10-01 00:15:00 UTC" "2012-10-01 00:20:00 UTC" "2012-10-01 00:25:00 UTC"
## This code block fails in the rmd file
# ```{r setoptions, echo = FALSE}
# opts_chunk$set(echo = TRUE)
# ```
## the error is: object 'opts_chunk' not found
savehistory("C:/Users/Dave/WorkSpaces/R/datasciencecoursera/RepData_PeerAssessment1/rr-pa1.Rhistory")
activity <- tbl_df(read.csv("activity.csv")) %>%
mutate(date.timestamp = ymd_hm(sprintf("%10s %04d", date, interval)))
nas <- activity %>% group_by(date) %>% summarize(na.cnt = sum(is.na(steps)))
empty.days <- nas[nas$na.cnt > 0, "date"]
empty.days
# Source: local data frame [8 x 1]
#
#         date
# 1 2012-10-01
# 2 2012-10-08
# 3 2012-11-01
# 4 2012-11-04
# 5 2012-11-09
# 6 2012-11-10
# 7 2012-11-14
# 8 2012-11-30
8*288
# [1] 2304
daily.steps.count <- activity %>% group_by(date) %>% summarize(step.cnt = sum(steps, na.rm = TRUE))
hist(daily.steps.count$step.cnt,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Frequency of Daily Steps")
daily.steps.mean <- mean(daily.steps.count$step.cnt)
# [1] 9354.23
daily.steps.median <- median(daily.steps.count$step.cnt)
# [1] 10395
savehistory("C:/Users/Dave/WorkSpaces/R/datasciencecoursera/RepData_PeerAssessment1/rr-pa1.Rhistory")
## Interval averages
steps.interval.averages <- activity %>% group_by(interval) %>% summarize(interval.mean = mean(steps, na.rm = TRUE))
with (steps.interval.averages, plot(interval.mean ~ interval, type = "l"))
steps.interval.averages[steps.interval.averages$interval.mean == max(steps.interval.averages$interval.mean),]
steps.interval.averages[steps.interval.averages$interval.mean > 206,]
steps.interval.averages.max <- steps.interval.averages[steps.interval.averages$interval.mean == max(steps.interval.averages$interval.mean),]
steps.interval.averages.max
steps.interval.averages.max$interval
activity[activity$interval == 835,]
hm("835")
str(daily.steps)
class(activity$date.timestamp)
interval.mean.steps <- activity %>% group_by(interval) %>% summarize(interval.mean = mean(steps, na.rm = TRUE))
interval.mean.steps <- activity %>%
	group_by(interval) %>%
	summarize(interval.mean = mean(steps, na.rm = TRUE))
with(interval.mean.steps,
	{
	plot(interval.mean ~ interval,
		type = "l",
		xlab = "Interval",
		ylab = "Average Steps per Interval",
		main = "Average Daily Activity")
	}
)
rm(steps.interval.averages, steps.interval.averages.max)
max.steps <- with(interval.mean.steps,  max(interval.mean))
max.interval <- with(interval.mean.steps,
		interval.mean.steps[
			interval.mean == max(interval.mean),]
	)
savehistory("C:/Users/Dave/WorkSpaces/R/datasciencecoursera/RepData_PeerAssessment1/rr_pa1_daily.Rhistory")
## Missing Data
sum(nas$na.cnt)
day1 <- activity[1:288,]
weekdays(now())
wday(now())
wday(empty.days$date)
wday(empty.days$date, label = T)
# dplyr v aggregate: 61 days v 53 days
a_dsc <- aggregate(steps ~ date, activity,sum, na.rm=T)
# replace NA with mean steps
imputed.steps <- activity %>%
	mutate(steps = ifelse(is.na(steps), interval.mean.steps$interval.mean, steps))
imputed.daily.steps <- activity %>%
	group_by(date) %>%
	summarize(step.cnt = sum(steps, na.rm = TRUE))
# Averages
round(mean(daily.steps.count$step.cnt), 2)
round(mean(imputed.daily.steps$step.cnt), 2)
# all 61 days
all.daily.steps.count <- activity %>%
	group_by(date) %>%
	summarize(step.cnt = sum(steps, na.rm = TRUE))
hist(all.daily.steps.count$step.cnt,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Frequency Distribution of Total Daily Steps")
all.daily.steps.mean <- round(mean(all.daily.steps.count$step.cnt), 2)
all.daily.steps.median <- median(all.daily.steps.count$step.cnt)
# only days with data (53 of them)
daily.steps.count <- aggregate(steps ~ date, activity,sum, na.rm=TRUE)
hist(daily.steps.count$steps,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Frequency Distribution of Total Daily Steps")
daily.steps.mean <- round(mean(daily.steps.count$steps), 2)
daily.steps.median <- median(daily.steps.count$steps)
hist(all.daily.steps.count$step.cnt,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days")
	title(main = "Daily Steps Frequency Distribution",
	sub = "for All Days")
hist(all.daily.steps.count$step.cnt,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Frequency Distribution\nfor All Days")
hist(daily.steps.count$steps,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Frequency Distribution\nfor Days With Data")
# 61 v 53
head(all.daily.steps.count$step.cnt)
head(daily.steps.count$steps)
nrow(all.daily.steps.count)
nrow(daily.steps.count)
daily.steps.mean
# daily activity plots
interval.mean.steps <- aggregate(steps ~ interval,
	activity,
	mean, na.rm=TRUE)
with(interval.mean.steps,
	plot(steps ~ interval,
		type = "l",
		xlab = "Interval",
		ylab = "Average Steps per Interval",
		main = "Average Daily Activity")
)
max.interval <- with(interval.mean.steps,
	interval.mean.steps[steps == max(steps),]
)
# missing data plot
plot(daily.nas$na.cnt ~ daily.nas$date,
	xlab = "Date",
	ylab = "Missing Intervals",
	main = "Number of Missing Intervals\nby Date")
daily.nas <- activity %>%
	group_by(date) %>%
	summarize(na.cnt = sum(is.na(steps)))
missing.step.values <- sum(daily.nas$na.cnt)
# what's the distribution of missing valuses
plot(daily.nas$na.cnt ~ daily.nas$date,
	xlab = "Date",
	ylab = "Missing Intervals",
	main = "Number of Missing Intervals\nby Date")
nrow(empty.days)
empty.dates <- daily.nas[daily.nas$na.cnt > 0, "date"]
empty.day.count <- nrow(empty.dates)
# Impute the missing data
imputed.activity <- activity %>%
	mutate(steps = ifelse(is.na(steps),
		interval.mean.steps$steps,
		steps))
hist(imputed.activity$steps,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Distribution\nfor Days With Imputed Data")
imputed.steps.mean <- mean(imputed.activity$steps)
imputed.steps.median <- median(imputed.activity$steps)
imputed.daily.steps.count <- aggregate(steps ~ date, activity, sum, na.rm=TRUE)
# the same plot and averages as before using the imputed data
hist(imputed.daily.steps.count$steps,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Distribution\nfor Days With Imputed Data")
imputed.steps.mean <- mean(imputed.daily.steps.count$steps)
imputed.steps.median <- median(imputed.daily.steps.count$steps)
hist(imputed.activity$steps,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Distribution\nfor Days With Imputed Data")
# try adding the count to the top of the hist bars
imputed.steps.hist <- hist(imputed.daily.steps.count$steps,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Distribution\nWith Imputed Data")
text(imputed.steps.hist$counts)
# not putting the counts in the right place
# look at the histogram info
imputed.steps.hist
imputed.steps.hist$counts
sum(imputed.steps.hist)
sum(imputed.steps.hist$counts)
imputed.daily.steps.count <- aggregate(steps ~ date, imputed.activity, sum)
# the same plot and averages as before using the imputed data
imputed.steps.hist <- hist(imputed.daily.steps.count$steps,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Distribution\nWith Imputed Data")
text(imputed.steps.hist$counts)
imputed.steps.mean <- mean(imputed.daily.steps.count$steps)
imputed.steps.median <- median(imputed.daily.steps.count$steps)
sum(imputed.steps.hist$counts)
imputed.steps.hist$counts
# try different break points to get more info into the histograms
imputed.steps.hist <- hist(imputed.daily.steps.count$steps,
	breaks = 10,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Distribution\nWith Imputed Data")
imputed.steps.hist <- hist(imputed.daily.steps.count$steps,
	breaks = 20,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Distribution\nWith Imputed Data")
imputed.steps.hist <- hist(imputed.daily.steps.count$steps,
	breaks = 25,
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Distribution\nWith Imputed Data")
# 20 looks like it adds the most usable data
# Now let's color the different graphs to help distinguish them
# what colors are available
colors()
# try various colors ... "lightsalmon", "tomato", "tomato[1-3]"
hist(all.daily.steps.count$step.cnt,
breaks = 20,
col="firebrick",
xlab = "Total Daily Steps",
ylab = "Frequency in Days",
main = "Daily Steps Distribution\nfor All Days")
# and "seagreen", "springgreen", "lightgreen"
# now try for better x axis tick text values
hist(imputed.daily.steps.count$steps,
	breaks = 20,
	xlim = c(0, 22000), ylim = c(0, 20),
	col = "lightgreen",
	xlab = "Total Daily Steps",
	ylab = "Frequency in Days",
	main = "Daily Steps Distribution\nWith Imputed Data")
## weekdays
work.week.activity <- imputed.activity %>$
	mutate(as.factor(
		ifelse(wday($dates, labels = TRUE) %in% c("Sat", "Sun"),
		"Weekend", "Weekday")))
head(work.week.activity)
work.week.activity <- imputed.activity %>%
	mutate(workweek = as.factor(
		ifelse(wday(date, label = TRUE) %in% c("Sat", "Sun"),
		"Weekend", "Weekday")))
# plot with lattice
require("lattice", warn.conflicts = FALSE, quietly = TRUE)
xyplot(steps ~ interval | workweek, data = work.week.activity, type = "l", layout = c(1, 2))
work.week.mean.steps <- work.week.activity %>%
	group_by(workweek, interval) %>%
	summarize(mean.steps = mean(steps, na.rm = TRUE))
xyplot(mean.steps ~ interval | workweek,
	data = work.week.mean.steps,
	type = "l",
	xlab = "Interval",
	ylab = "Mean Number of Steps",
	main = "Weekend vs Weekday Activity",
	layout = c(1, 2))
savehistory("C:/Users/Dave/WorkSpaces/R/datasciencecoursera/RepData_PeerAssessment1/rr_pa1_daily.Rhistory")
